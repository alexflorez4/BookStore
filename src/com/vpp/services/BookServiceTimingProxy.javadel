package com.vpp.services;

import com.vpp.exceptions.BookNotFoundException;
import com.vpp.domain.Book;

import java.util.List;

public class BookServiceTimingProxy implements BookService
{
    private BookService originalBookService;

    public void setOriginalBookService(BookService original)
    {
        this.originalBookService = original;
    }

    @Override
    public List<Book> getAllBooksByAuthor(String author) {
        return null;
    }

    @Override
    public List<Book> getAllRecommendedBooks(String userId) {
        return null;
    }

    @Override
    public Book getBookByIsbn(String isbn) throws BookNotFoundException {
        long nanoSecondsInMiliseconds = 1000000;
        long timeThen = System.nanoTime();

        try{
            Book foundBook = originalBookService.getBookByIsbn(isbn);
            return foundBook;
        }
        finally {
            long timeNow = System.nanoTime();
            long timeTaken = timeNow - timeThen;
            System.out.println("getBookByIsbn took " + timeTaken / nanoSecondsInMiliseconds + " miliseconds");
        }
    }

    @Override
    public List<Book> getEntireCatalogue() {
        long nanoSecondsInMiliseconds = 1000000;
        long timeThen = System.nanoTime();

        List<Book> allBooks = originalBookService.getEntireCatalogue();

        long timeNow = System.nanoTime();
        long timeTaken = timeNow - timeThen;
        System.out.println("getEntireCatalogue took " + timeTaken / nanoSecondsInMiliseconds + " miliseconds");

        return allBooks;
    }

    @Override
    public void registerNewBook(Book newBook) {
        long nanoSecondsInMiliseconds = 1000000;
        long timeThen = System.nanoTime();
        originalBookService.registerNewBook(newBook);
        long timeNow = System.nanoTime();
        long timeTaken = timeNow - timeThen;
        System.out.println("registerNewBook took " + timeTaken / nanoSecondsInMiliseconds + " miliseconds");

    }
}
